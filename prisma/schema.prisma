generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id Int @id @default(autoincrement())

    username String
    password String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    AuditLog AuditLog[]
    Session  Session[]

    @@unique([username, deletedAt])
}

model SchoolYear {
    id Int @id @default(autoincrement())

    name      String
    startDate DateTime @db.Timestamptz()
    endDate   DateTime @db.Timestamptz()

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    SchoolPeriod SchoolPeriod[]
    StudentGrade StudentGrade[]

    @@unique([name, deletedAt])
}

model SchoolPeriod {
    id Int @id @default(autoincrement())

    schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])
    month      Int
    name       String?

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolYearId    Int
    MonthlyFee      MonthlyFee[]
    GradeFeeHistory GradeFeeHistory[]
    Payment         Payment[]

    @@unique([month, schoolYearId, deletedAt])
}

model Student {
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentGrade    StudentGrade[]
    Payment         Payment[]
    StudentDiscount StudentDiscount[]

    @@unique([name, deletedAt])
}

model MonthlyFee {
    id Int @id @default(autoincrement())

    description   String
    amount        Decimal      @db.Decimal(15, 2)
    effectiveFrom SchoolPeriod @relation(fields: [schoolPeriodId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolPeriodId  Int
    GradeFeeHistory GradeFeeHistory[]

    @@unique([description, deletedAt])
}

model GradeFeeHistory {
    id Int @id @default(autoincrement())

    monthlyFee   MonthlyFee   @relation(fields: [monthlyFeeId], references: [id])
    grade        Grade        @relation(fields: [gradeId], references: [id])
    schoolPeriod SchoolPeriod @relation(fields: [schoolPeriodId], references: [id])

    monthlyFeeId   Int
    gradeId        Int
    schoolPeriodId Int
    Payment        Payment[]

    @@unique([gradeId, schoolPeriodId])
}

model Grade {
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentGrade    StudentGrade[]
    GradeFeeHistory GradeFeeHistory[]

    @@unique([name, deletedAt])
}

model StudentGrade {
    id Int @id @default(autoincrement())

    schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])
    grade      Grade      @relation(fields: [gradeId], references: [id])
    student    Student    @relation(fields: [studentId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolYearId Int
    gradeId      Int
    studentId    Int

    @@unique([schoolYearId, gradeId, studentId, deletedAt])
}

model Discount {
    id Int @id @default(autoincrement())

    name         String
    description  String
    amount       Decimal @db.Decimal(15, 2)
    isPercentage Boolean @default(true)

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentDiscount StudentDiscount[]

    @@unique([name, deletedAt])
}

model StudentDiscount {
    id       Int      @id @default(autoincrement())
    student  Student  @relation(fields: [studentId], references: [id])
    discount Discount @relation(fields: [discountId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    studentId      Int
    discountId     Int
    schoolPeriodId Int?
    Payment        Payment[]

    @@unique([studentId, discountId, schoolPeriodId, deletedAt])
}

model PaymentMethod {
    id Int @id @default(autoincrement())

    name                       String
    requiresManualVerification Boolean @default(true)
    requiresReferenceId        Boolean @default(true)

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    Payment Payment[]

    @@unique([name, deletedAt])
}

enum PaymentType {
    FULL
    PARTIAL
    FEE
    REFUND
    OVERDUE
}

model Payment {
    id           Int          @id @default(autoincrement())
    student      Student      @relation(fields: [studentId], references: [id])
    schoolPeriod SchoolPeriod @relation(fields: [schoolPeriodId], references: [id])
    amount       Decimal      @db.Decimal(15, 2)

    paymentMethod     PaymentMethod    @relation(fields: [paymentMethodId], references: [id])
    reference         String?
    discountApplied   StudentDiscount? @relation(fields: [studentDiscountId], references: [id])
    studentDiscountId Int?

    gradeFeeHistory GradeFeeHistory @relation(fields: [gradeFeeHistoryId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    studentId         Int
    schoolPeriodId    Int
    gradeFeeHistoryId Int
    paymentMethodId   Int

    @@unique([reference, deletedAt])
}

enum AuditableEntities {
    USER
    SCHOOL_YEAR
    SCHOOL_PERIOD
    STUDENT
    MONTHLY_FEE
    GRADE_FEE_HISTORY
    GRADE
    STUDENT_GRADE
    DISCOUNT
    STUDENT_DISCOUNT
    PAYMENT_METHOD
    PAYMENT
}

enum AuditLogActions {
    CREATE
    UPDATE
    SOFT_DELETE
    DELETE
}

model AuditLog {
    id        Int               @id @default(autoincrement())
    entity    AuditableEntities
    changes   String?
    action    AuditLogActions
    byUser    User              @relation(fields: [userId], references: [id])
    createdAt DateTime          @default(now()) @db.Timestamptz()
    userId    Int
}

model Session {
    id Int @id @default(autoincrement())

    jti        String   @unique
    user       User     @relation(fields: [userId], references: [id])
    expiration DateTime @db.Timestamptz()

    createdAt DateTime @default(now()) @db.Timestamptz()

    userId Int
}

model Setting {
    id Int @id @default(autoincrement())

    name  String @unique
    value String
}
