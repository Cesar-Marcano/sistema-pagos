generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [pg_trgm]
}

model User {
    id Int @id @default(autoincrement())

    username String
    password String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    AuditLog AuditLog[]
    Session  Session[]

    @@unique([username, deletedAt])
}

model SchoolYear {
    id Int @id @default(autoincrement())

    name      String
    startDate DateTime @db.Timestamptz()
    endDate   DateTime @db.Timestamptz()

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    SchoolPeriod SchoolPeriod[]
    StudentGrade StudentGrade[]

    @@unique([name, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
    @@index([startDate, endDate])
}

model SchoolPeriod {
    id Int @id @default(autoincrement())

    schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])
    name       String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolYearId Int
    SchoolMonth  SchoolMonth[]

    @@unique([name, schoolYearId, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
    @@index([schoolYearId])
}

model SchoolMonth {
    id Int @id @default(autoincrement())

    schoolPeriod SchoolPeriod @relation(fields: [schoolPeriodId], references: [id])
    month        Int
    name         String?

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolPeriodId        Int
    Payment               Payment[]
    MonthlyFeeOnGrade     MonthlyFeeOnGrade[]
    StudentMonthDiscount StudentMonthDiscount[]

    @@unique([month, schoolPeriodId, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
    @@index([month, schoolPeriodId])
}

model Student {
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentGrade          StudentGrade[]
    Payment               Payment[]
    StudentDiscount       StudentDiscount[]
    StudentMonthDiscount StudentMonthDiscount[]

    @@unique([name, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

model MonthlyFee {
    id Int @id @default(autoincrement())

    description String
    amount      Decimal @db.Decimal(15, 2)

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    MonthlyFeeOnGrade MonthlyFeeOnGrade[]

    @@unique([description, deletedAt])
    @@index([description(ops: raw("gin_trgm_ops"))], type: Gin)
}

model MonthlyFeeOnGrade {
    id Int @id @default(autoincrement())

    monthlyFee          MonthlyFee   @relation(fields: [monthlyFeeId], references: [id])
    grade               Grade        @relation(fields: [gradeId], references: [id])
    effectiveFromMonth SchoolMonth @relation(fields: [schoolMonthId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    monthlyFeeId   Int
    schoolMonthId Int
    gradeId        Int

    @@unique([monthlyFeeId, gradeId, schoolMonthId, deletedAt])
    @@index([monthlyFeeId, gradeId, schoolMonthId])
}

model Grade {
    id Int @id @default(autoincrement())

    name String

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentGrade      StudentGrade[]
    MonthlyFeeOnGrade MonthlyFeeOnGrade[]

    @@unique([name, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

model StudentGrade {
    id Int @id @default(autoincrement())

    schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])
    grade      Grade      @relation(fields: [gradeId], references: [id])
    student    Student    @relation(fields: [studentId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    schoolYearId Int
    gradeId      Int
    studentId    Int

    @@unique([schoolYearId, gradeId, studentId, deletedAt])
}

model Discount {
    id Int @id @default(autoincrement())

    name         String
    description  String
    amount       Decimal @db.Decimal(15, 2)
    isPercentage Boolean @default(true)

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    StudentDiscount       StudentDiscount[]
    StudentMonthDiscount StudentMonthDiscount[]

    @@unique([name, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
    @@index([description(ops: raw("gin_trgm_ops"))], type: Gin)
}

model StudentDiscount {
    id Int @id @default(autoincrement())

    student  Student  @relation(fields: [studentId], references: [id])
    discount Discount @relation(fields: [discountId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    studentId  Int
    discountId Int

    @@unique([studentId, discountId, deletedAt])
}

model PaymentMethod {
    id Int @id @default(autoincrement())

    name                       String
    requiresManualVerification Boolean @default(true)
    requiresReferenceId        Boolean @default(true)

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    Payment Payment[]

    @@unique([name, deletedAt])
    @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
}

enum PaymentType {
    FULL
    PARTIAL
    REFUND
    OVERDUE
}

model Payment {
    id Int @id @default(autoincrement())

    student      Student      @relation(fields: [studentId], references: [id])
    schoolMonth SchoolMonth @relation(fields: [schoolMonthId], references: [id])
    amount       Decimal      @db.Decimal(15, 2)
    paymentType  PaymentType

    paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
    reference     String?
    verified      Boolean?
    createdAt     DateTime      @default(now()) @db.Timestamptz()
    updatedAt     DateTime      @updatedAt @db.Timestamptz()
    deletedAt     DateTime?     @db.Timestamptz()

    studentId       Int
    schoolMonthId  Int
    paymentMethodId Int

    @@unique([paymentMethodId, reference, deletedAt])
    @@index([studentId, schoolMonthId, paymentMethodId])
}

model StudentMonthDiscount {
    id Int @id @default(autoincrement())

    student  Student      @relation(fields: [studentId], references: [id])
    schoolMonth   SchoolMonth @relation(fields: [schoolMonthId], references: [id])
    discount Discount     @relation(fields: [discountId], references: [id])

    createdAt DateTime  @default(now()) @db.Timestamptz()
    updatedAt DateTime  @updatedAt @db.Timestamptz()
    deletedAt DateTime? @db.Timestamptz()

    discountId     Int
    studentId      Int
    schoolMonthId Int

    @@unique([discountId, studentId, schoolMonthId, deletedAt])
}

enum AuditableEntities {
    USER
    SCHOOL_YEAR
    SCHOOL_PERIOD
    SCHOOL_MONTH
    STUDENT
    MONTHLY_FEE
    MONTHLY_FEE_ON_GRADE
    GRADE
    STUDENT_GRADE
    DISCOUNT
    STUDENT_DISCOUNT
    STUDENT_MONTH_DISCOUNT
    PAYMENT_METHOD
    PAYMENT
    SETTING
}

enum AuditLogActions {
    CREATE
    UPDATE
    SOFT_DELETE
    DELETE
    UPSERT
}

model AuditLog {
    id        Int               @id @default(autoincrement())
    entity    AuditableEntities
    changes   String?
    action    AuditLogActions
    byUser    User              @relation(fields: [userId], references: [id])
    createdAt DateTime          @default(now()) @db.Timestamptz()
    userId    Int
}

model Session {
    id Int @id @default(autoincrement())

    jti        String   @unique
    user       User     @relation(fields: [userId], references: [id])
    expiration DateTime @db.Timestamptz()

    createdAt DateTime @default(now()) @db.Timestamptz()

    userId Int
}

enum Settings {
    DAYS_UNTIL_OVERDUE
    PAYMENT_DUE_DAY
    OVERDUE_FEE_VALUE
    OVERDUE_FEE_IS_PERCENTAGE
    SESSION_TIMEOUT_MINUTES
    MINIMUM_PASSWORD_LENGTH
    IS_USER_REGISTRATION_ENABLED
    DB_CLEANUP_DAYS
    SOFT_DELETED_MODELS_TO_PURGE
    AUDIT_LOG_RETENTION_DAYS
    CURRENCY_SYMBOL
    ACTUAL_SCHOOL_YEAR_ID
    ACTUAL_SCHOOL_PERIOD_ID
    ACTUAL_SCHOOL_MONTH_ID
    SEARCH_THRESHOLD
    PUBLIC_REGISTRATION_ENABLED
}

model Setting {
    id Int @id @default(autoincrement())

    name  Settings @unique
    value String
}

enum PurgableModels {
    User
    SchoolYear
    SchoolPeriod
    Student
    MonthlyFee
    MonthlyFeeOnGrade
    Grade
    StudentGrade
    Discount
    StudentDiscount
    PaymentMethod
    Payment
    StudentMonthDiscount
}
